#conda create -n projet python pandas numpy matplotlib jupyterlab kagglehub seaborn streamlit plotly 
#conda activate projet
#jupyter lab --notebook-dir="c:/"
# se situer dans le rÃ©pertoir avec le fichier py
# streamlit run application_LECOQ_ROESCH.py

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt

st.markdown("https://github.com/LECOQLomann/SAE-6-01-VCOD")
st.markdown("https://sae-6-01-vcod-fwjhhbnth43gkohq6twrhv.streamlit.app/")

# Chargement des donnÃ©es
#df = pd.read_csv("........ds_salaries.csv")
df = pd.read_csv("ds_salaries.csv")

### 2. Exploration visuelle des donnÃ©es
st.title("ðŸ“Š Visualisation des Salaires en Data Science")
st.markdown("Explorez les tendances des salaires Ã  travers diffÃ©rentes visualisations interactives.")

# AperÃ§u des donnÃ©es
# affiche un checkbox qui quand il est cocher, afficher le rÃ©sumer de notre jeu de donnÃ©es (les 5 premiÃ¨res lignes)
if st.checkbox("Afficher un aperÃ§u des donnÃ©es"):
    st.write(df.head())


# Statistique gÃ©nÃ©rales avec describe pandas 
# Statistiques gÃ©nÃ©rales
st.subheader("ðŸ“Œ Statistiques gÃ©nÃ©rales")
st.write(df.describe(include='all')) # discribe pour voir les statistiques sur les variable quantitative 
st.markdown("On constate que le salaire(USD) moyen est de 137 000$. Le taux de tÃ©lÃ©travail moyen est de 46%.")
st.markdown("Le type d'emploi le plus reprÃ©sentÃ© est FT ou Full time, le niveau d'expÃ©rience majoritaire est Senior, et le job le plus prÃ©sent dans les donnÃ©es est Data Engineer. Les employÃ©s proviennent de 78 pays diffÃ©rents et majoritairemnt des US. Il y a 72 pays pour les entreprises, majoritairement en US.Et enfin, la taille la plus reprÃ©sentÃ©e en M, entreprise moyenne.")


### 3. Distribution des salaires en France par rÃ´le et niveau d'expÃ©rience, uilisant px.box et st.plotly_chart
st.subheader("ðŸ“ˆ Distribution des salaires en France")

df_france = df.query("company_location == 'FR'") # permet de filtrÃ© sur la france uniquement
fig_box = px.box(df_france, x="experience_level", y="salary_in_usd", color="experience_level",title="Boxplot des salaires par niveau d'expÃ©rience en France")#On colore selon la valeur de la variable expÃ©reince
st.plotly_chart(fig_box)

st.markdown("On constate ici que le salaire moyen des seniors est le plus Ã©levÃ© avec pratiquement 80 000$ usd, contre 60 000$ pour les moyennement experimentÃ©s et 40 000$ pour les peu expertimentÃ©s. Il n'y a pas d'experts en France. Le salaire minimum d'un serior est supÃ©rieur au salaire moyen d'un junior et pratiquement supÃ©rieur Ã  son salaire maximum. On constate que les salaires les plus Ã©levÃ©s de notre jeu de donnÃ©es sont pratiquement tous gagnÃ©s par des seniors, ce uqi paraÃ®t plutÃ´t lÃ©gitime.")



### 4. Analyse des tendances de salaires :
#### Salaire moyen par catÃ©gorie : 
#### en choisisant une des : ['experience_level', 'employment_type', 'job_title', 'company_location'], utilisant px.bar et st.selectbox 
st.subheader("Salaire moyen par catÃ©gorie")

categorie = st.selectbox("SÃ©lectionnez une catÃ©gorie", ['experience_level', 'employment_type', 'job_title', 'company_location'])#GrÃ¢ce Ã  cette selection on choisit note axe d'analyse entre 4 variables. Le graphique sera actualisÃ© en fontion du choix rÃ©alisÃ©
# crÃ©ation d'un datafarme qui group by la catÃ©gorie selectionner, qui fait une moyenne des salaire, et qui rÃ©nisialise les index (sans index, les graphiques ne peuvent pas se gÃ©nÃ©rer)
df_mean_salary = df.groupby(categorie)["salary_in_usd"].mean().reset_index()
fig_bar = px.bar(df_mean_salary, x=categorie, y='salary_in_usd', color=categorie, title="Moyenne des salires en fonction de la catÃ©gorie sÃ©lectionnÃ©e")
st.plotly_chart(fig_bar)

st.markdown("Ici nous pouvons voir le salaire moyen selon plusieurs axes d'analyse : le niveau d'expÃ©rience, la catÃ©gorie d'emploi, le mÃ©tier, et le pays de l'entreprise. Pour ce qui est de la catÃ©gorie d'emploi, il y a un gros Ã©cart entre les contrats en plein temps et les 'contractors' et les autres. Le mÃ©tier qui ressort bien aju dessus des autres est Applied Machine Learning Engineer. Et le pays qui paye le mieux ses employÃ©s dans la data est Israel.")



### 5. CorrÃ©lation entre variables
# SÃ©lectionner uniquement les colonnes numÃ©riques pour la corrÃ©lation*
st.subheader("ðŸ”— CorrÃ©lations entre variables numÃ©riques")

# Calcul de la matrice de corrÃ©lation
numeric_cols = df.select_dtypes(include=np.number).columns # sÃ©lÃ©ction des colonnes uniquement numÃ©rique de notre datafarm
df_corr = df[numeric_cols].corr() # on calcul la matrix de corÃ©lation des donnÃ©es numÃ©rics crÃ©Ã© prÃ©cÃ©dement


# Affichage du heatmap avec sns.heatmap
fig, ax = plt.subplots() #crÃ©ation d'un figure et d'un axe pour la rÃ©prÃ©nstation du heatmap
sns.heatmap(df_corr, cmap="coolwarm", annot=True, ax=ax) # crÃ©ation du heatmap grÃ¢ce a la corrÃ©lation calculer plus tÃ´t, annot=True permet d'afficher sur le Heatmap les valeur corrÃ©spondent, et spÃ©cifie l'axe que le souhaite utiliser, a savoir ax crÃ©Ã© Ã©galement plus haut. cmap="coolwarm" permet d'avoir des couleur varillant du bleu au rouge 
st.pyplot(fig)  

st.markdown("Ici on constate qu'il n'y a aucune corrÃ©lation forte entre nos variables. La corrÃ©lation maximale est de 0.23 ou -0.24, et c'est entre l'annÃ©e et le ration de tÃ©lÃ©travail(nÃ©gatif) ou bien le salaire (positif).Mais il est clair que ce n'est pas pertinent, car l'annÃ©e correspond Ã  l'annÃ©e d'emploi du salairiÃ© (entre 2020 et 2023)...")


### 6. Analyse interactive des variations de salaire
# Une Ã©volution des salaires pour les 10 postes les plus courants
# count of job titles pour selectionner les postes
# calcule du salaire moyen par an
# utilisez px.line

st.subheader("ðŸ“ˆ Ã‰volution des salaires")


top = df['job_title'].value_counts().nlargest(10).index # permet de compter les occurences de chaque intitulÃ© de poste  et de garde les 10 plus courant
df_top = df[df['job_title'].isin(top)] # permet de ne conserve que les 10 intituler sÃ©lÃ©ctionner
salaire_an = df_top.groupby(['job_title', 'work_year'])['salary_in_usd'].mean().reset_index() # calcule de la moyenne par poste et par annÃ©e
    
salaires_10 = px.line(salaire_an,x='work_year',y='salary_in_usd', color='job_title', title='Ã‰volution des salaires pour les 10 postes les plus courants',labels={'salary_in_usd': 'Salaire moyen (USD)', 'work_year': 'AnnÃ©e'},template="plotly_white") #crÃ©ation d'un graphique en ligne pour visualisÃ© l'Ã©volution des salaire des 10 postes les plus courant

st.plotly_chart(salaires_10)
st.write('on observe une chute generale des salaires en 2021, probablement a cause de developpement des IA, soit a cause du confinement, mais ils se retablissent rapidements.' )


### 7. Salaire mÃ©dian par expÃ©rience et taille d'entreprise
# utilisez median(), px.bar
#votre code 

st.subheader("Salaire mÃ©dian par expÃ©rience et taille d'entreprise")

df_exp_taille = df.groupby(['company_size', 'experience_level'])['salary_in_usd'].median().reset_index() # Calcul du salaire median selon la taille de la companies par le niveau d'expÃ©rience
    
experience_taille = px.bar(df_exp_taille, title="Somme des salaires mÃ©dianes par expÃ©rience et taille d'entreprise", x='company_size', y='salary_in_usd',color='experience_level') # crÃ©ation d'un barplot de la df df_exp_taille de la taille de la companie par le salaire median

st.plotly_chart(experience_taille)
st.write('la lecture de ce graphique n est pas evidante, il faut comprendre que chaque barre est une somme mediannes des types de salaries (leurs experience), et il faut utiliser le fait que graphque est interactif pour observer les mediannes exactes pour tel ou tel classe.' )

### 8. Ajout de filtres dynamiques
#Filtrer les donnÃ©es par salaire utilisant st.slider pour selectionner les plages 

st.subheader("Ajout de filtres dynamiques")

min_ = 0 # crÃ©ation d'une valeur minimum
max_ = 500000 # crÃ©ation d'une valeur maximum
selection_salaire = st.slider('SÃ©lection de la plage de salaire', min_value= min_, max_value=max_, value=(min_,max_)) # crÃ©ation d'un slider avec les iformation des minimums et maximums crÃ©Ã© plus tÃ´t
    
salaire = df[(df['salary_in_usd'] >= selection_salaire[0]) & (df['salary_in_usd'] <= selection_salaire[1])] #filtrage du dataFrame en fonction de la plage de salaires sÃ©lectionner
st.write(salaire)


### 9.  Impact du tÃ©lÃ©travail sur le salaire selon le pays




### 10. Filtrage avancÃ© des donnÃ©es avec deux st.multiselect, un qui indique "SÃ©lectionnez le niveau d'expÃ©rience" et l'autre "SÃ©lectionnez la taille d'entreprise"
#votre code 

